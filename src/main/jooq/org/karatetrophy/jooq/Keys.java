/*
 * This file is generated by jOOQ.
 */
package org.karatetrophy.jooq;


import org.jooq.ForeignKey;
import org.jooq.Record;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.karatetrophy.jooq.tables.AgeRange;
import org.karatetrophy.jooq.tables.BeltRange;
import org.karatetrophy.jooq.tables.Challenge;
import org.karatetrophy.jooq.tables.Competition;
import org.karatetrophy.jooq.tables.CompetitonDay;
import org.karatetrophy.jooq.tables.Composition;
import org.karatetrophy.jooq.tables.Dojo;
import org.karatetrophy.jooq.tables.Federation;
import org.karatetrophy.jooq.tables.KarateMaster;
import org.karatetrophy.jooq.tables.Karateka;
import org.karatetrophy.jooq.tables.Partecipation;
import org.karatetrophy.jooq.tables.Referee;
import org.karatetrophy.jooq.tables.TenderCommittee;
import org.karatetrophy.jooq.tables.Tournament;
import org.karatetrophy.jooq.tables.WeightRange;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * karate_trophy.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<Record> KEY_AGE_RANGE_PRIMARY = Internal.createUniqueKey(AgeRange.AGE_RANGE, DSL.name("KEY_age_range_PRIMARY"), new TableField[] { AgeRange.AGE_RANGE.MIN_AGE }, true);
    public static final UniqueKey<Record> KEY_BELT_RANGE_PRIMARY = Internal.createUniqueKey(BeltRange.BELT_RANGE, DSL.name("KEY_belt_range_PRIMARY"), new TableField[] { BeltRange.BELT_RANGE.MIN_LEVEL }, true);
    public static final UniqueKey<Record> KEY_CHALLENGE_PRIMARY = Internal.createUniqueKey(Challenge.CHALLENGE, DSL.name("KEY_challenge_PRIMARY"), new TableField[] { Challenge.CHALLENGE.START_DATE, Challenge.CHALLENGE.CITY, Challenge.CHALLENGE.NAME, Challenge.CHALLENGE.DAY, Challenge.CHALLENGE.START_TIME, Challenge.CHALLENGE.POULE_NUMBER, Challenge.CHALLENGE.KARATEKA }, true);
    public static final UniqueKey<Record> KEY_COMPETITION_PRIMARY = Internal.createUniqueKey(Competition.COMPETITION, DSL.name("KEY_competition_PRIMARY"), new TableField[] { Competition.COMPETITION.START_DATE, Competition.COMPETITION.CITY, Competition.COMPETITION.TOURNAMENT_NAME, Competition.COMPETITION.DAY, Competition.COMPETITION.START_TIME, Competition.COMPETITION.POULE_NUMBER }, true);
    public static final UniqueKey<Record> KEY_COMPETITON_DAY_PRIMARY = Internal.createUniqueKey(CompetitonDay.COMPETITON_DAY, DSL.name("KEY_competiton_day_PRIMARY"), new TableField[] { CompetitonDay.COMPETITON_DAY.START_DATE, CompetitonDay.COMPETITON_DAY.CITY, CompetitonDay.COMPETITON_DAY.NAME, CompetitonDay.COMPETITON_DAY.DAY }, true);
    public static final UniqueKey<Record> KEY_COMPOSITION_PRIMARY = Internal.createUniqueKey(Composition.COMPOSITION, DSL.name("KEY_composition_PRIMARY"), new TableField[] { Composition.COMPOSITION.COMMITTEE, Composition.COMPOSITION.REFEREE }, true);
    public static final UniqueKey<Record> KEY_DOJO_PRIMARY = Internal.createUniqueKey(Dojo.DOJO, DSL.name("KEY_dojo_PRIMARY"), new TableField[] { Dojo.DOJO.ADDRESS, Dojo.DOJO.NAME }, true);
    public static final UniqueKey<Record> KEY_FEDERATION_PRIMARY = Internal.createUniqueKey(Federation.FEDERATION, DSL.name("KEY_federation_PRIMARY"), new TableField[] { Federation.FEDERATION.NAME }, true);
    public static final UniqueKey<Record> KEY_KARATE_MASTER_PRIMARY = Internal.createUniqueKey(KarateMaster.KARATE_MASTER, DSL.name("KEY_karate_master_PRIMARY"), new TableField[] { KarateMaster.KARATE_MASTER.FISCAL_CODE }, true);
    public static final UniqueKey<Record> KEY_KARATEKA_PRIMARY = Internal.createUniqueKey(Karateka.KARATEKA, DSL.name("KEY_karateka_PRIMARY"), new TableField[] { Karateka.KARATEKA.FISCAL_CODE }, true);
    public static final UniqueKey<Record> KEY_PARTECIPATION_PRIMARY = Internal.createUniqueKey(Partecipation.PARTECIPATION, DSL.name("KEY_partecipation_PRIMARY"), new TableField[] { Partecipation.PARTECIPATION.DOJO_ADDRESS, Partecipation.PARTECIPATION.DOJO_NAME, Partecipation.PARTECIPATION.TOURNAMENT_START_DATE, Partecipation.PARTECIPATION.TOURNAMENT_CITY, Partecipation.PARTECIPATION.TOURNAMENT_NAME }, true);
    public static final UniqueKey<Record> KEY_REFEREE_PRIMARY = Internal.createUniqueKey(Referee.REFEREE, DSL.name("KEY_referee_PRIMARY"), new TableField[] { Referee.REFEREE.FISCAL_CODE }, true);
    public static final UniqueKey<Record> KEY_TENDER_COMMITTEE_PRIMARY = Internal.createUniqueKey(TenderCommittee.TENDER_COMMITTEE, DSL.name("KEY_tender_committee_PRIMARY"), new TableField[] { TenderCommittee.TENDER_COMMITTEE.ID_COMMITTEE }, true);
    public static final UniqueKey<Record> KEY_TOURNAMENT_PRIMARY = Internal.createUniqueKey(Tournament.TOURNAMENT, DSL.name("KEY_tournament_PRIMARY"), new TableField[] { Tournament.TOURNAMENT.START_DATE, Tournament.TOURNAMENT.CITY, Tournament.TOURNAMENT.NAME }, true);
    public static final UniqueKey<Record> KEY_WEIGHT_RANGE_PRIMARY = Internal.createUniqueKey(WeightRange.WEIGHT_RANGE, DSL.name("KEY_weight_range_PRIMARY"), new TableField[] { WeightRange.WEIGHT_RANGE.MIN_WEIGHT }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<Record, Record> FKCOM_COM_1 = Internal.createForeignKey(Challenge.CHALLENGE, DSL.name("FKCom_COM_1"), new TableField[] { Challenge.CHALLENGE.START_DATE, Challenge.CHALLENGE.CITY, Challenge.CHALLENGE.NAME, Challenge.CHALLENGE.DAY, Challenge.CHALLENGE.START_TIME, Challenge.CHALLENGE.POULE_NUMBER }, Keys.KEY_COMPETITION_PRIMARY, new TableField[] { Competition.COMPETITION.START_DATE, Competition.COMPETITION.CITY, Competition.COMPETITION.TOURNAMENT_NAME, Competition.COMPETITION.DAY, Competition.COMPETITION.START_TIME, Competition.COMPETITION.POULE_NUMBER }, true);
    public static final ForeignKey<Record, Record> FKR_0 = Internal.createForeignKey(Challenge.CHALLENGE, DSL.name("FKR_0"), new TableField[] { Challenge.CHALLENGE.KARATEKA }, Keys.KEY_KARATEKA_PRIMARY, new TableField[] { Karateka.KARATEKA.FISCAL_CODE }, true);
    public static final ForeignKey<Record, Record> FKEXECUTION = Internal.createForeignKey(Competition.COMPETITION, DSL.name("FKEXECUTION"), new TableField[] { Competition.COMPETITION.START_DATE, Competition.COMPETITION.CITY, Competition.COMPETITION.TOURNAMENT_NAME, Competition.COMPETITION.DAY }, Keys.KEY_COMPETITON_DAY_PRIMARY, new TableField[] { CompetitonDay.COMPETITON_DAY.START_DATE, CompetitonDay.COMPETITON_DAY.CITY, CompetitonDay.COMPETITON_DAY.NAME, CompetitonDay.COMPETITON_DAY.DAY }, true);
    public static final ForeignKey<Record, Record> FKJURY = Internal.createForeignKey(Competition.COMPETITION, DSL.name("FKJURY"), new TableField[] { Competition.COMPETITION.ID_COMMITTEE }, Keys.KEY_TENDER_COMMITTEE_PRIMARY, new TableField[] { TenderCommittee.TENDER_COMMITTEE.ID_COMMITTEE }, true);
    public static final ForeignKey<Record, Record> FKR = Internal.createForeignKey(Competition.COMPETITION, DSL.name("FKR"), new TableField[] { Competition.COMPETITION.AGE_RANGE }, Keys.KEY_AGE_RANGE_PRIMARY, new TableField[] { AgeRange.AGE_RANGE.MIN_AGE }, true);
    public static final ForeignKey<Record, Record> FKR_1 = Internal.createForeignKey(Competition.COMPETITION, DSL.name("FKR_1"), new TableField[] { Competition.COMPETITION.LEVEL_RANGE }, Keys.KEY_BELT_RANGE_PRIMARY, new TableField[] { BeltRange.BELT_RANGE.MIN_LEVEL }, true);
    public static final ForeignKey<Record, Record> FKR_2 = Internal.createForeignKey(Competition.COMPETITION, DSL.name("FKR_2"), new TableField[] { Competition.COMPETITION.WEIGHT_RANGE }, Keys.KEY_WEIGHT_RANGE_PRIMARY, new TableField[] { WeightRange.WEIGHT_RANGE.MIN_WEIGHT }, true);
    public static final ForeignKey<Record, Record> FKPLANNING = Internal.createForeignKey(CompetitonDay.COMPETITON_DAY, DSL.name("FKPLANNING"), new TableField[] { CompetitonDay.COMPETITON_DAY.START_DATE, CompetitonDay.COMPETITON_DAY.CITY, CompetitonDay.COMPETITON_DAY.NAME }, Keys.KEY_TOURNAMENT_PRIMARY, new TableField[] { Tournament.TOURNAMENT.START_DATE, Tournament.TOURNAMENT.CITY, Tournament.TOURNAMENT.NAME }, true);
    public static final ForeignKey<Record, Record> FKCOM_REF = Internal.createForeignKey(Composition.COMPOSITION, DSL.name("FKCOM_REF"), new TableField[] { Composition.COMPOSITION.REFEREE }, Keys.KEY_REFEREE_PRIMARY, new TableField[] { Referee.REFEREE.FISCAL_CODE }, true);
    public static final ForeignKey<Record, Record> FKCOM_TEN = Internal.createForeignKey(Composition.COMPOSITION, DSL.name("FKCOM_TEN"), new TableField[] { Composition.COMPOSITION.COMMITTEE }, Keys.KEY_TENDER_COMMITTEE_PRIMARY, new TableField[] { TenderCommittee.TENDER_COMMITTEE.ID_COMMITTEE }, true);
    public static final ForeignKey<Record, Record> FKDOJO_ADDRESS = Internal.createForeignKey(KarateMaster.KARATE_MASTER, DSL.name("FKDojo_Address"), new TableField[] { KarateMaster.KARATE_MASTER.DOJO_ADDRESS, KarateMaster.KARATE_MASTER.DOJO_NAME }, Keys.KEY_DOJO_PRIMARY, new TableField[] { Dojo.DOJO.ADDRESS, Dojo.DOJO.NAME }, true);
    public static final ForeignKey<Record, Record> FKRECRUITMENT = Internal.createForeignKey(Karateka.KARATEKA, DSL.name("FKRECRUITMENT"), new TableField[] { Karateka.KARATEKA.KARATE_MASTER }, Keys.KEY_KARATE_MASTER_PRIMARY, new TableField[] { KarateMaster.KARATE_MASTER.FISCAL_CODE }, true);
    public static final ForeignKey<Record, Record> FKPAR_DOJ = Internal.createForeignKey(Partecipation.PARTECIPATION, DSL.name("FKPAR_DOJ"), new TableField[] { Partecipation.PARTECIPATION.DOJO_ADDRESS, Partecipation.PARTECIPATION.DOJO_NAME }, Keys.KEY_DOJO_PRIMARY, new TableField[] { Dojo.DOJO.ADDRESS, Dojo.DOJO.NAME }, true);
    public static final ForeignKey<Record, Record> FKPAR_TOUR = Internal.createForeignKey(Partecipation.PARTECIPATION, DSL.name("FKPAR_TOUR"), new TableField[] { Partecipation.PARTECIPATION.TOURNAMENT_START_DATE, Partecipation.PARTECIPATION.TOURNAMENT_CITY, Partecipation.PARTECIPATION.TOURNAMENT_NAME }, Keys.KEY_TOURNAMENT_PRIMARY, new TableField[] { Tournament.TOURNAMENT.START_DATE, Tournament.TOURNAMENT.CITY, Tournament.TOURNAMENT.NAME }, true);
    public static final ForeignKey<Record, Record> FKORGANIZATION = Internal.createForeignKey(Tournament.TOURNAMENT, DSL.name("FKORGANIZATION"), new TableField[] { Tournament.TOURNAMENT.FEDERATION_NAME }, Keys.KEY_FEDERATION_PRIMARY, new TableField[] { Federation.FEDERATION.NAME }, true);
}
