/*
 * This file is generated by jOOQ.
 */
package org.karatetrophy.jooq.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.karatetrophy.jooq.KarateTrophy;
import org.karatetrophy.jooq.Keys;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CompetitonDay extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>karate_trophy.competiton_day</code>
     */
    public static final CompetitonDay COMPETITON_DAY = new CompetitonDay();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>karate_trophy.competiton_day.Start_date</code>.
     */
    public final TableField<Record, LocalDate> START_DATE = createField(DSL.name("Start_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>karate_trophy.competiton_day.City</code>.
     */
    public final TableField<Record, String> CITY = createField(DSL.name("City"), SQLDataType.CHAR(50).nullable(false), this, "");

    /**
     * The column <code>karate_trophy.competiton_day.Name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("Name"), SQLDataType.CHAR(50).nullable(false), this, "");

    /**
     * The column <code>karate_trophy.competiton_day.Day</code>.
     */
    public final TableField<Record, LocalDate> DAY = createField(DSL.name("Day"), SQLDataType.LOCALDATE.nullable(false), this, "");

    private CompetitonDay(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private CompetitonDay(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>karate_trophy.competiton_day</code> table
     * reference
     */
    public CompetitonDay(String alias) {
        this(DSL.name(alias), COMPETITON_DAY);
    }

    /**
     * Create an aliased <code>karate_trophy.competiton_day</code> table
     * reference
     */
    public CompetitonDay(Name alias) {
        this(alias, COMPETITON_DAY);
    }

    /**
     * Create a <code>karate_trophy.competiton_day</code> table reference
     */
    public CompetitonDay() {
        this(DSL.name("competiton_day"), null);
    }

    public <O extends Record> CompetitonDay(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, COMPETITON_DAY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : KarateTrophy.KARATE_TROPHY;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_COMPETITON_DAY_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FKPLANNING);
    }

    private transient Tournament _tournament;

    /**
     * Get the implicit join path to the <code>karate_trophy.tournament</code>
     * table.
     */
    public Tournament tournament() {
        if (_tournament == null)
            _tournament = new Tournament(this, Keys.FKPLANNING);

        return _tournament;
    }

    @Override
    public CompetitonDay as(String alias) {
        return new CompetitonDay(DSL.name(alias), this);
    }

    @Override
    public CompetitonDay as(Name alias) {
        return new CompetitonDay(alias, this);
    }

    @Override
    public CompetitonDay as(Table<?> alias) {
        return new CompetitonDay(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CompetitonDay rename(String name) {
        return new CompetitonDay(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompetitonDay rename(Name name) {
        return new CompetitonDay(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompetitonDay rename(Table<?> name) {
        return new CompetitonDay(name.getQualifiedName(), null);
    }
}
