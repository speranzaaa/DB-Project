/*
 * This file is generated by jOOQ.
 */
package org.karatetrophy.jooq.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.karatetrophy.jooq.KarateTrophy;
import org.karatetrophy.jooq.Keys;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Federation extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>karate_trophy.federation</code>
     */
    public static final Federation FEDERATION = new Federation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>karate_trophy.federation.Name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("Name"), SQLDataType.CHAR(50).nullable(false), this, "");

    private Federation(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Federation(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>karate_trophy.federation</code> table reference
     */
    public Federation(String alias) {
        this(DSL.name(alias), FEDERATION);
    }

    /**
     * Create an aliased <code>karate_trophy.federation</code> table reference
     */
    public Federation(Name alias) {
        this(alias, FEDERATION);
    }

    /**
     * Create a <code>karate_trophy.federation</code> table reference
     */
    public Federation() {
        this(DSL.name("federation"), null);
    }

    public <O extends Record> Federation(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, FEDERATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : KarateTrophy.KARATE_TROPHY;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_FEDERATION_PRIMARY;
    }

    @Override
    public Federation as(String alias) {
        return new Federation(DSL.name(alias), this);
    }

    @Override
    public Federation as(Name alias) {
        return new Federation(alias, this);
    }

    @Override
    public Federation as(Table<?> alias) {
        return new Federation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Federation rename(String name) {
        return new Federation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Federation rename(Name name) {
        return new Federation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Federation rename(Table<?> name) {
        return new Federation(name.getQualifiedName(), null);
    }
}
