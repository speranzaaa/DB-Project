/*
 * This file is generated by jOOQ.
 */
package org.karatetrophy.jooq.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.karatetrophy.jooq.KarateTrophy;
import org.karatetrophy.jooq.Keys;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Challenge extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>karate_trophy.challenge</code>
     */
    public static final Challenge CHALLENGE = new Challenge();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>karate_trophy.challenge.Winner</code>.
     */
    public final TableField<Record, String> WINNER = createField(DSL.name("Winner"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>karate_trophy.challenge.Start_date</code>.
     */
    public final TableField<Record, LocalDate> START_DATE = createField(DSL.name("Start_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>karate_trophy.challenge.City</code>.
     */
    public final TableField<Record, String> CITY = createField(DSL.name("City"), SQLDataType.CHAR(50).nullable(false), this, "");

    /**
     * The column <code>karate_trophy.challenge.Name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("Name"), SQLDataType.CHAR(50).nullable(false), this, "");

    /**
     * The column <code>karate_trophy.challenge.Day</code>.
     */
    public final TableField<Record, LocalDate> DAY = createField(DSL.name("Day"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>karate_trophy.challenge.Start_Time</code>.
     */
    public final TableField<Record, Integer> START_TIME = createField(DSL.name("Start_Time"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>karate_trophy.challenge.Poule_Number</code>.
     */
    public final TableField<Record, Integer> POULE_NUMBER = createField(DSL.name("Poule_Number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>karate_trophy.challenge.Karateka</code>.
     */
    public final TableField<Record, String> KARATEKA = createField(DSL.name("Karateka"), SQLDataType.CHAR(50).nullable(false), this, "");

    private Challenge(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Challenge(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>karate_trophy.challenge</code> table reference
     */
    public Challenge(String alias) {
        this(DSL.name(alias), CHALLENGE);
    }

    /**
     * Create an aliased <code>karate_trophy.challenge</code> table reference
     */
    public Challenge(Name alias) {
        this(alias, CHALLENGE);
    }

    /**
     * Create a <code>karate_trophy.challenge</code> table reference
     */
    public Challenge() {
        this(DSL.name("challenge"), null);
    }

    public <O extends Record> Challenge(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, CHALLENGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : KarateTrophy.KARATE_TROPHY;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_CHALLENGE_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FKCOM_COM_1, Keys.FKR_0);
    }

    private transient Competition _competition;
    private transient Karateka _karateka;

    /**
     * Get the implicit join path to the <code>karate_trophy.competition</code>
     * table.
     */
    public Competition competition() {
        if (_competition == null)
            _competition = new Competition(this, Keys.FKCOM_COM_1);

        return _competition;
    }

    /**
     * Get the implicit join path to the <code>karate_trophy.karateka</code>
     * table.
     */
    public Karateka karateka() {
        if (_karateka == null)
            _karateka = new Karateka(this, Keys.FKR_0);

        return _karateka;
    }

    @Override
    public Challenge as(String alias) {
        return new Challenge(DSL.name(alias), this);
    }

    @Override
    public Challenge as(Name alias) {
        return new Challenge(alias, this);
    }

    @Override
    public Challenge as(Table<?> alias) {
        return new Challenge(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Challenge rename(String name) {
        return new Challenge(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Challenge rename(Name name) {
        return new Challenge(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Challenge rename(Table<?> name) {
        return new Challenge(name.getQualifiedName(), null);
    }
}
