/*
 * This file is generated by jOOQ.
 */
package org.karatetrophy.jooq.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.karatetrophy.jooq.KarateTrophy;
import org.karatetrophy.jooq.Keys;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Partecipation extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>karate_trophy.partecipation</code>
     */
    public static final Partecipation PARTECIPATION = new Partecipation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>karate_trophy.partecipation.Tournament_Start_date</code>.
     */
    public final TableField<Record, LocalDate> TOURNAMENT_START_DATE = createField(DSL.name("Tournament_Start_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>karate_trophy.partecipation.Tournament_City</code>.
     */
    public final TableField<Record, String> TOURNAMENT_CITY = createField(DSL.name("Tournament_City"), SQLDataType.CHAR(50).nullable(false), this, "");

    /**
     * The column <code>karate_trophy.partecipation.Tournament_Name</code>.
     */
    public final TableField<Record, String> TOURNAMENT_NAME = createField(DSL.name("Tournament_Name"), SQLDataType.CHAR(50).nullable(false), this, "");

    /**
     * The column <code>karate_trophy.partecipation.Dojo_Address</code>.
     */
    public final TableField<Record, String> DOJO_ADDRESS = createField(DSL.name("Dojo_Address"), SQLDataType.CHAR(50).nullable(false), this, "");

    /**
     * The column <code>karate_trophy.partecipation.Dojo_Name</code>.
     */
    public final TableField<Record, String> DOJO_NAME = createField(DSL.name("Dojo_Name"), SQLDataType.CHAR(50).nullable(false), this, "");

    private Partecipation(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Partecipation(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>karate_trophy.partecipation</code> table
     * reference
     */
    public Partecipation(String alias) {
        this(DSL.name(alias), PARTECIPATION);
    }

    /**
     * Create an aliased <code>karate_trophy.partecipation</code> table
     * reference
     */
    public Partecipation(Name alias) {
        this(alias, PARTECIPATION);
    }

    /**
     * Create a <code>karate_trophy.partecipation</code> table reference
     */
    public Partecipation() {
        this(DSL.name("partecipation"), null);
    }

    public <O extends Record> Partecipation(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PARTECIPATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : KarateTrophy.KARATE_TROPHY;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_PARTECIPATION_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FKPAR_TOUR, Keys.FKPAR_DOJ);
    }

    private transient Tournament _tournament;
    private transient Dojo _dojo;

    /**
     * Get the implicit join path to the <code>karate_trophy.tournament</code>
     * table.
     */
    public Tournament tournament() {
        if (_tournament == null)
            _tournament = new Tournament(this, Keys.FKPAR_TOUR);

        return _tournament;
    }

    /**
     * Get the implicit join path to the <code>karate_trophy.dojo</code> table.
     */
    public Dojo dojo() {
        if (_dojo == null)
            _dojo = new Dojo(this, Keys.FKPAR_DOJ);

        return _dojo;
    }

    @Override
    public Partecipation as(String alias) {
        return new Partecipation(DSL.name(alias), this);
    }

    @Override
    public Partecipation as(Name alias) {
        return new Partecipation(alias, this);
    }

    @Override
    public Partecipation as(Table<?> alias) {
        return new Partecipation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Partecipation rename(String name) {
        return new Partecipation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Partecipation rename(Name name) {
        return new Partecipation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Partecipation rename(Table<?> name) {
        return new Partecipation(name.getQualifiedName(), null);
    }
}
